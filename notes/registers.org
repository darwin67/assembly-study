#+STARTUP: showall

* General registers
** Data Registers (used for arithmetic, logical, and other operations)

   |-----+----+----+----+----------------------|
   | 32  | 16 | 8  | 8  | Name                 |
   |-----+----+----+----+----------------------|
   | EAX | AX | AH | AL | Accumulator register |
   | EBX | BX | BH | BL | Base register        |
   | ECX | CX | CH | CL | Counter register     |
   | EDX | DX | DH | DL | Data register        |
   |-----+----+----+----+----------------------|

   - As complete 32-bit data registers: EAX, EBX, ECX, EDX.
     + EAX
     + EBX
     + ECX
     + EDX
   - Lower halves of the 32-bit registers can be used as four 16-bit data registers
     + AX (primary accumulator)
       it is used in input/output and most arithmetic instructions. For example,
       in multiplication operation, one operand is stored in EAX or AX or AL register
       according to the size of the operand.
     + BX (base register)
       it could be used in indexed addressing.
     + CX (count register)
       CX registers store the loop count in iterative operations.
     + DX (data register)
       It is also used in input/output operations. It is also used with AX register
       along with DX for multiply and divide operations involving large values.
   - Lower and higher halves of the above-mentioned four 16-bit registers
     can be used as eight 8-bit data registers
     + AH AL
     + BH BL
     + CH CL
     + DH DL


** Pointer Registers

   |-----+----+---------------|
   | 32  | 16 | Name          |
   |-----+----+---------------|
   | ESP | SP | Stack Pointer |
   | EBP | BP | Base Pointer  |
   |-----+----+---------------|

   - EIP, IP (Instruction Pointer)
     The 16-bit IP register stores the offset address of the next instruction to be
     executed. IP in association with the CS register (as CS:IP) gives the complete
     address of the current instruction in the code segment.
   - ESP, SP (Stack Pointer)
     The 16-bit SP register provides the offset value within the program stack. SP in
     association with the SS register (SS:SP) refers to be current position of data or
     address within the program stack.
   - EBP, BP (Base Pointer)
     The 16-bit BP register mainly helps in referencing the parameter variables passed
     to a subroutine. The address in SS register is combined with the offset in BP to
     get the location of the parameter. BP can also be combined with DI and SI as base
     register for special addressing


** Index Registers

   |-----+----+-------------------|
   | 32  | 16 | Name              |
   |-----+----+-------------------|
   | ESI | SI | Source Index      |
   | EDI | DI | Destination Index |
   |-----+----+-------------------|

   - ESI, SI (Source Index)
     It is used as source index for string operations.sss
   - EDI, DI (Destination Index)
     It is used as destination index for string operations.


* Control Registers
  The 32-bit instruction pointer register and the 32-bit flags register combined are
  considered as the control registers.
  Many instructions involve comparisons and mathematical calculations and change the status
  of the flags and some other conditional instructions test the value of these status flags
  to take the control flow to other location.

  |---------+----+----+----+----+----+----+---+---+---+---+---+---+---+---+---+---|
  | Flag    |    |    |    |    |  O |  D | I | T | S | Z |   | A |   | P |   | C |
  |---------+----+----+----+----+----+----+---+---+---+---+---+---+---+---+---+---|
  | Bit no. | 15 | 14 | 13 | 12 | 11 | 10 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
  |---------+----+----+----+----+----+----+---+---+---+---+---+---+---+---+---+---|

   - OF (Overflow Flag)
     It indicates the overflow of a high-order bit (leftmost bit) of data after a signed
     arithmetic operation.
   - DF (Direction Flag)
     It determines left or right direction for moving or comparing string data. When the
     DF value is 0, the string operation takes left-to-right direction and when the value
     is set to 1, the string operation takes right-to-left direction.
   - IF (Interrupt Flag)
     It determines whether the external interrupts like keyboard entry, etc., are to be
     ignored or processed. It disables the external interrupt when the value is 0 and enables
     interrupts when set to 1.
   - TF (Trap Flag)
     It allows setting the operation of the processor in single-step mode. The DEBUG program
     we used sets the trap flag, so we could step through the execution one instruction at a
     time.
   - SF (Sign Flag)
     It shows the sign of the result of an arithmetic operation. This flag is set according
     to the sign of a data item following the arithmetic operation. The sign is indicated by
     the high-order of leftmost bit. A positive result clears the value of SF to 0 and negative
     result sets it to 1.
   - ZF (Zero Flag)
     It indicates the result of an arithmetic or comparison operation. A nonzero result clears
     the zero flag to 0, and a zero result sets it to 1.
   - AF (Auxiliary Carry Flag)
     It contains the carry from bit 3 to bit 4 following an arithmetic operation; used for
     specialized arithmetic. The AF is set when a 1-byte arithmetic operation causes a carry
     from bit 3 into bit 4.
   - PF (Parity Flag)
     It indicates the total number of 1-bits in the result obtained from an arithmetic operation.
     An even number of 1-bits clears the parity flag to 0 and an odd number of 1-bits sets the
     parity flag to 1.
   - CF (Carry Flag)
     It contains the carry of 0 or 1 from a high-order bit (leftmost) after an arithmetic operation.
     It also stores the contents of last bit of a shift or rotate operation.


* Segment Registers
  Segments are specific areas defined in a program for containing data, code and stack.
  There are three main segments

  - CS (Code Segment)
    It contains all the instructions to be executed. A 16-bit Code Segment register or
    CS register stores the starting address of the code segment.
  - DS (Data Segment)
    It contains data, constants and work areas. A 16-bit Data Segment register or DS register
    stores the starting address of the data segment.
  - SS (Stack Segment)
    It contains data and return addresses of procedures or subroutines. It is implemented as a
    'stack' data structure. The Stack Segment register or SS register stores the starting address
    of the stack.

  Apart from the DS, CS and SS registers, there are other extra segment registers
  - ES (extra segment)
  - FS
  - GS
  which provide additional segments for storing data.

  In assembly programming, a program needs to access the memory locations. All memory locations
  within a segment are relative to the starting address of the segment. A segment begins in an
  address evenly divisible by 16 or hexadecimal 10. So, the rightmost hex digit in all such memory
  addresses is 0, which is not generally stored in the segment registers.

  The segment registers stores the starting addresses of a segment. To get the exact location of data
  or instruction within a segment, an offset value (or displacement) is required. To reference any
  memory location in a segment, the processor combines the segment address in the segment register
  with the offset value of the location.
