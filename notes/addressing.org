#+STARTUP: showall

* Addressing

** Register Addressing
   In this addressing mode, a register contains the operand. Depending upon the instruction,
   the register may be the first operand, the second operand or both.

   #+NAME: register addressing
   #+BEGIN_SRC asm
     mov dx, tax_rate               ; Register in first operand
     mov count, cx                  ; Register in second operand
     mov eax, ebx                   ; Both the operands are registers
   #+END_SRC

** Immediate Addressing
   An immediate operand has a constant value or an expression. When an instruction with two
   operands uses immediate addressing, the first operand may be a register or memory location,
   and the second operand is an immediate constant. The first operand defines the length of the
   data.

   #+NAME: immediate addressing
   #+BEGIN_SRC asm
     byte_value db 150               ; A byte value is defined
     word_value dw 300               ; A word value is defined
     add byte_value, 65              ; An immediate operand 65 is added
     mov ax, 45h                     ; Immediate constant 45h is transferred to AX
   #+END_SRC


** Memory Addressing

*** Direct Memory Addressing
   When operands are specified in memory addressing mode, direct access to main memory, usually
   to the data segment, is required. This way of addressing results in slower processing of data.
   To locate the exact location of data in memory, we need the segment start address, which is
   typically found in the DS register and an offset value. This offset value is also called
   *effective address*.

   In direct addressing mode, the offset value is specified directly as part of the instruction,
   usually indicated by the variable name. The assembler calculates the offset value and maintains
   a symbol table, which stores the offset values of all the variables used in the program.

   In direct memory addressing, one of the operands refers to a memory location and the other
   operand references a register.

   #+NAME: direct addressing
   #+BEGIN_SRC asm
     add byte_value, dl              ; Adds the register in the memory location
     mov bx, word_value              ; Operand from the memory is added to register
   #+END_SRC

*** Direct-Offset Addressing
    This addressing mode uses the arithmetic operators to modify an address.

    #+NAME: direct-offset addressing 1
   #+BEGIN_SRC asm
      byte_table db 14, 15, 22, 45     ; Tables of bytes
      word_table dw 134, 345, 564, 123 ; Tables of words
   #+END_SRC

   The following operations access data from the tables in the memory into registers
   #+NAME: direct-offset addressing 2
   #+BEGIN_SRC asm
     mov cl, byte_table[2]           ; Gets the 3rd element of the BYTE_TABLE
     mov cl, byte_table + 2          ; Gets the 3rd element of the BYTE_TABLE
     mov cx, word_table[3]           ; Gets the 4th element of the WORD_TABLE
     mov cx, word_table + 3          ; Gets the 4th element of the WORD_TABLE
   #+END_SRC


*** Indirect memory addressing
    This addressing mode utilizes the computer's ability of /Segment:Offset/ addressing.
    Generally, the base registers EBX, EBP (or BX, BP) and the index registers (DI, SI), coded
    within square brackets for memory references, are used for this purpose.

    Indirect addressing is generally used for variables containing several elements like, arrays.
    Starting address of the array is stored in, say, the EBX register.

    #+NAME: indirect addressing
   #+BEGIN_SRC asm
      my_table times 10 dw 0          ; Allocates 10 words (2 bytes) each initialized to 0
      mov ebx, [my_table]             ; Effective Address of MY_TABLE in EBX
      mov [ebx], 110                  ; MY_TABLE[0] = 110
      add ebx, 2                      ; EBX = EBX +2
      mov [ebx], 123                  ; MY_TABLE[1] = 123
   #+END_SRC


* MOV Instruction
  - Both the operands in MOV operation should be of same size
  - The value of source operand remains uncharged

  The MOV instruction may have one of the following five forms:
  #+NAME: MOV instruction
  #+BEGIN_SRC asm
      MOV  register, register
      MOV  register, immediate
      MOV  memory, immediate
      MOV  register, memory
      MOV  memory, register
  #+END_SRC

  *Type Specifiers*
  | Type Specifier | Bytes Addressed |
  |----------------+-----------------|
  | BYTE           |               1 |
  | WORD           |               2 |
  | DWORD          |               4 |
  | QWORD          |               8 |
  | TBYTE          |              10 |
