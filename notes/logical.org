#+STARTUP: showall

* Logical Instructions

  |----+-------------+-------------------------|
  | SN | Instruction | Format                  |
  |----+-------------+-------------------------|
  |  1 | AND         | AND  operand1, operand2 |
  |  2 | OR          | OR   operand1, operand2 |
  |  3 | XOR         | XOR  operand1, operand2 |
  |  4 | TEST        | TEST operand1, operand2 |
  |  5 | NOT         | NOT  operand1, operand2 |
  |----+-------------+-------------------------|

** AND Instruction
   #+NAME: AND
   #+BEGIN_SRC txt
         operand1: 0101
         operand2: 0011
    -------------------
         operand1: 0001
   #+END_SRC


** OR Instruction
   #+NAME: OR
   #+BEGIN_SRC txt
         operand1: 0101
         operand2: 0011
    -------------------
         operand1: 0111
   #+END_SRC


** XOR Instruction
   #+NAME: XOR
   #+BEGIN_SRC txt
         operand1: 0101
         operand2: 0011
    -------------------
         operand1: 0110
   #+END_SRC


** TEST Instruction
   The TEST instruction works same as the AND operation, but unlike AND instruction, it does not
   change the first operand. So, if we need to check whether a number in a register is even or odd,
   we can also do this using the TEST instruction without changing the original number.

   #+NAME: TEST
   #+BEGIN_SRC asm
     TEST AL, 01h
     JZ EVEN_NUMBER
   #+END_SRC


** NOT Instruction
   #+NAME: OR
   #+BEGIN_SRC txt
         operand1: 0101 0011
    ------------------------
         operand1: 1010 1100
   #+END_SRC
