#+STARTUP: showall

* Procedures / Subroutines
  Procedures or subroutines are very important in assembly language, as the assembly language programs
  tend to be large in size. Procedures are identified by a name. Following this name, the body of the
  procedure is described which performs a well-defined job. End of the procedure is indicated by a
  return statement.

  #+NAME: Procedure
   #+BEGIN_SRC asm
    proc_name:
       procedure body
       ...
       ret                          ; return statement
   #+END_SRC


* Stack Data Structure
  A stack is an array-like data structure in the memory in which data can be stored and removed from a
  location called the *top* of the stack. The data that needs to be stored is *pushed* into the stack
  and data to be retrieved is *popped* out from the stack.
  Stack is a *LIFO* data structure, i.e., the data stored first is retrieved last.

  #+NAME: Stack
   #+BEGIN_SRC asm
    push <operand>
    pop  <address/register>
   #+END_SRC

   The memory space reserved in the stack segment is used for implementing stack. The registers *SS* and
   *ESP* (or *SP*) are used for implementing the stack. The top of the stack, which points to the last
   data item inserted into the stack is pointed to by the *SS:ESP* register, where the *SS* register points
   to the beginning of the stack segment and the *SP* (or *ESP*) gives the offset into the stack segment.

   The stack implementation has the following characteristics:
   - Only *words* or *doublewords* could be saved into the stack, not a byte.
   - The stack grows in the reverse direction, i.e., toward the lower memory address.
   - The top of the stack points to the last item inserted in the stack; it points to the lower byte of the
     last word inserted.

   #+NAME: Stack
   #+BEGIN_SRC asm
             ;; Save the AX and BX registers in the stack
             PUSH AX
             PUSH BX

             ;; Use the registers for other purpose
             MOV AX, VALUE1
             MOV BX, VALUE2
             ...
             MOV VALUE1, AX
             MOV VALUE2, BX

             ;; Restore the original values
             POP AX
             POP BX
   #+END_SRC
