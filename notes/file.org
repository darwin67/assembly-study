#+STARTUP: showall

* File Management
** File Descriptor
   A file descriptor is a 16-bit integer assigned to a file as a file id. When a new file is
   created or an existing file is opened, the file descriptor is used for accessing the file.

   File descriptor of the standard file streams - *stdin*, *stdout* and *stderr* are 0, 1 and 2,
   respectively.

** File Pointer
   A file pointer specifies the location for a subsequent read/write operation in the file in
   terms of bytes. Each file is considered as a sequence of bytes. Each open file is associated
   with a file pointer that specifies an offset in bytes, relative to the beginning of the file.
   When a file is opened, the file pointer is set to zero.

** File Handling System Calls
   See *system.org* for a brief table of system calls.

   |------------------+-----|
   | File Access Mode | int |
   |------------------+-----|
   | read only        |   0 |
   | write only       |   1 |
   | read write       |   2 |
   |------------------+-----|

   |-------------------+-------|
   | Position          | Value |
   |-------------------+-------|
   | Beginning of File |     0 |
   | Current Position  |     1 |
   | End of File       |     2 |
   |-------------------+-------|


** Creating and Opening a File
   - Put the system call *sys_creat()* number 8, in the EAX register.
   - Put the filename in the EBX register.
   - Put the file permissions in the ECX register.

   The system call returns the file descriptor of the created file in the EAX register, in case
   of error, the error code is in the EAX register.

** Opening an Existing File
   - Put the system call *sys_open()* number 5, in the EAX register.
   - Put the filename in the EBX register.
   - Put the file access mode in the ECX register.
   - Put the file permissions in the EDX register.

   The system call returns the file descriptor of the created file in the EAX register, in case
   of error, the error code is in the EAX register.

** Reading from a File
   - Put the system call *sys_read()* number 3, in the EAX register.
   - Put the file descriptor in the EBX register.
   - Put the pointer to the input buffer in the ECX register.
   - Put the buffer size, i.e., the number of bytes to read, in the EDX register.

   The system call returns the number of bytes read in the EAX register, in case of error, the
   error code is in the EAX register.

** Writing to a File
   - Put the system call *sys_write()* number 4, in the EAX register.
   - Put the file descriptor in the EBX register.
   - Put the pointer to the output buffer in the ECX register.
   - Put the buffer size, i.e., the number of bytes to write, in the EDX register.

   The system call returns the actual number of bytes written in the EAX register, in case of
   error, the error code is in the EAX register.

** Closing a File
   - Put the system call *sys_close()* number 6, in the EAX register.
   - Put the file descriptor in the EBX register.

   The system call returns, in case of error, the error code in the EAX register.

** Updating a File
   - Put the system call *sys_lseek()* number 19, in the EAX register.
   - Put the file descriptor in the EBX register.
   - Put the offset value in the ECX register.
   - Put the reference position for the offset in the EDX register.

   The system call returns, in case of error, the error code in the EAX register.
