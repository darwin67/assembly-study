* Arithmetic Instructions

** INC
   The INC instruction is used for incrementing an operand by one.
   It works on a single operand that can be either in a register or in memory.

   #+NAME: INC
   #+BEGIN_SRC asm
     INC ebx                         ; Increments 32-bit register
     INC dl                          ; Increments 8-bit register
     INC [count]                     ; Increments the count variable
   #+END_SRC


** DEC
   The DEC instruction is used for decrementing an operand by one.
   It works on a single operand that can be either in a register or in memory.

   #+NAME: DEC
   #+BEGIN_SRC asm
   segment .data
     count dw 0
     value db 15

   segment .text
     inc [count]
     dec [value]

     mov ebx, count
     inc word [ebx]

     mov esi, value
     dec byte [esi]
   #+END_SRC


** ADD / SUB
   The ADD and SUB instructions are used for performing simple addition/subtraction of
   binary data in byte, word and doubleword size, i.e., for adding or subtracting 8-bit,
   16-bit or 32-bit operands, respectively.

   The ADD/SUB instruction can take place between:
   - Register to register
   - Memory to register
   - Register to memory
   - Register to constant data
   - Memory to constant data

   However, like other instructions, memory-to-memory operations are not possible using
   ADD/SUB instructions. An ADD or SUB operation sets or clears the overflow and carry flags.


** MUL / IMUL
   There are two instructions for multiplying binary data. The MUL (Multiply) instruction
   handles unsigned data and the IMUL (Integer Multiply) handles signed data. Both instructions
   affect the Carry and Overflow flag.

   Multiplicand in both cases will be in an accumulator, depending upon the size of the multiplicand
   and the multiplier and the generated product is also stored in two registers depending upon the
   size of the operands.
   |----+------------------------------------------------------------------------------------------|
   | SN | Scenarios                                                                                |
   |----+------------------------------------------------------------------------------------------|
   |  1 | *When 2 bytes are multiplied:*                                                           |
   |    | The multiplicand is in the *AL* register, and the multiplier is a byte in the memory or  |
   |    | in another register. The product is in *AX*. High-order 8 bits of the product is stored  |
   |    | in AH and the low-order 8 bits are stored in *AL*.                                       |
   |    |                                                                                          |
   |    | AL * 8 bit source = AH AL (=> AX)                                                        |
   |----+------------------------------------------------------------------------------------------|
   |  2 | *When two one-word values are multiplied*                                                |
   |    | The multiplicand should be in the *AX* register, and the multiplier is a word in memory  |
   |    | or another register. For example, for an instruction like MUL DX, you must store the     |
   |    | multiplier in *DX* and the multiplicand in *AX*.                                         |
   |    |                                                                                          |
   |    | The resultant product is a doubleword, which will need two registers. The high-order     |
   |    | (leftmost) portion gets stored in DX and the lower-order (rightmost) portion gets        |
   |    | stored in AX.                                                                            |
   |    |                                                                                          |
   |    | AX * 16 bit source = DX AX                                                               |
   |----+------------------------------------------------------------------------------------------|
   |  3 | *When two doubleword values are multiplied*                                              |
   |    | When two doubleword values are multiplied, the multiplicand should be in *EAX* and the   |
   |    | multiplier is a doubleword value stored in memory or in another register. The product    |
   |    | generated is stored in the *EDX:EAX* registers, i.e., the high order 32 bits gets        |
   |    | stored in the *EDX* register and the low order 32-bits are stored in the *EAX* register. |
   |    |                                                                                          |
   |    | EAX * 32 bit source = EDX EAX                                                            |
   |----+------------------------------------------------------------------------------------------|

   #+NAME: MUL
   #+BEGIN_SRC asm
     mov al, 10
     mov dl, 25
     mul dl
     ...
     mov dl, 0FFH                    ; DL = -1
     mov al, 0BEH                    ; AL = -66
     imul, dl
   #+END_SRC


** DIV / IDIV
   The division operation generates two elements - a *quotient* and a *remainder*. In case of
   multiplication, overflow does not occur because double-length registers are used to keep
   the product. However, in case of division, overflow may occur. The processor generates an
   interrupt if overflow occurs.

   The DIV (Divide) instruction is used for unsigned data and the IDIV (Integer Divide) is used
   for signed data.

   The dividend is in an accumulator. Both the instructions can work with 8-bit, 16-bit or 32-bit
   operands. The operation affects all six status flags.
   |----+-------------------------------------------------------------------------------------------------|
   | SN | Scenarios                                                                                       |
   |----+-------------------------------------------------------------------------------------------------|
   |  1 | *When the divisor is 1 byte*                                                                    |
   |    | The dividend is assumed to be in the *AX* register (16 bits). After division, the quotient      |
   |    | goes to the *AL* register and the remainder goes to the *AH* register.                          |
   |    |                                                                                                 |
   |    | AX (16 bit dividend) / 8 bit divisor = AL (Quotient) & AH (Remainder)                           |
   |----+-------------------------------------------------------------------------------------------------|
   |  2 | *When the divisor is 1 word*                                                                    |
   |    | The dividend is assumed to be 32 bits long and in the *DX:AX* registers. The high-order 16      |
   |    | bits are in *DX* and the low-order 16 bits are in *AX*. After division, the 16-bit *quotient*   |
   |    | goes to the *AX* register and the 16-bit *remainder* goes to the *DX* register.                 |
   |    |                                                                                                 |
   |    | DX AX (32 bit dividend) / 16 bit divisor = AX (Quotient) & DX (Remainder)                       |
   |----+-------------------------------------------------------------------------------------------------|
   |  3 | *When the divisor is doubleword*                                                                |
   |    | The dividend is assumed to be 64 bits long and in the *EDX:EAX* registers. The high-order 32    |
   |    | bits are in *EDX* and the low-order 32 bits are in *EAX*. After division, the 32-bit *quotient* |
   |    | goes to the *EAX* register and the 32-bit *remainder* goes to the *EDX* register.               |
   |    |                                                                                                 |
   |    | EDX EAX (64 bit dividend) / 32 bit divisor = EAX (Quotient) & EDX (Remainder)                   |
   |----+-------------------------------------------------------------------------------------------------|
